
racing_zadanie02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015b4  08000184  08000184  00010184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001738  08001738  00011738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001748  08001748  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001748  08001748  00011748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001750  08001750  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001750  08001750  00011750  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001754  08001754  00011754  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001758  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  2000000c  08001764  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  08001764  00020038  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003b2b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000fda  00000000  00000000  00023b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000420  00000000  00000000  00024b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000388  00000000  00000000  00024f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bfa9  00000000  00000000  000252e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000534c  00000000  00000000  00041291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a9410  00000000  00000000  000465dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000ef9ed  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000eb8  00000000  00000000  000efa40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	; (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	; (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000000c 	.word	0x2000000c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08001720 	.word	0x08001720

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	; (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	; (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	; (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000010 	.word	0x20000010
 80001c0:	08001720 	.word	0x08001720

080001c4 <__aeabi_uldivmod>:
 80001c4:	b953      	cbnz	r3, 80001dc <__aeabi_uldivmod+0x18>
 80001c6:	b94a      	cbnz	r2, 80001dc <__aeabi_uldivmod+0x18>
 80001c8:	2900      	cmp	r1, #0
 80001ca:	bf08      	it	eq
 80001cc:	2800      	cmpeq	r0, #0
 80001ce:	bf1c      	itt	ne
 80001d0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001d8:	f000 b976 	b.w	80004c8 <__aeabi_idiv0>
 80001dc:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e4:	f000 f806 	bl	80001f4 <__udivmoddi4>
 80001e8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001ec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f0:	b004      	add	sp, #16
 80001f2:	4770      	bx	lr

080001f4 <__udivmoddi4>:
 80001f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001f8:	9e08      	ldr	r6, [sp, #32]
 80001fa:	460d      	mov	r5, r1
 80001fc:	4604      	mov	r4, r0
 80001fe:	4688      	mov	r8, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14d      	bne.n	80002a0 <__udivmoddi4+0xac>
 8000204:	428a      	cmp	r2, r1
 8000206:	4694      	mov	ip, r2
 8000208:	d968      	bls.n	80002dc <__udivmoddi4+0xe8>
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	b152      	cbz	r2, 8000226 <__udivmoddi4+0x32>
 8000210:	fa01 f302 	lsl.w	r3, r1, r2
 8000214:	f1c2 0120 	rsb	r1, r2, #32
 8000218:	fa20 f101 	lsr.w	r1, r0, r1
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	ea41 0803 	orr.w	r8, r1, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 411c 	mov.w	r1, ip, lsr #16
 800022a:	fbb8 f7f1 	udiv	r7, r8, r1
 800022e:	fa1f fe8c 	uxth.w	lr, ip
 8000232:	fb01 8817 	mls	r8, r1, r7, r8
 8000236:	fb07 f00e 	mul.w	r0, r7, lr
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000240:	4298      	cmp	r0, r3
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x66>
 8000244:	eb1c 0303 	adds.w	r3, ip, r3
 8000248:	f107 35ff 	add.w	r5, r7, #4294967295	; 0xffffffff
 800024c:	f080 811e 	bcs.w	800048c <__udivmoddi4+0x298>
 8000250:	4298      	cmp	r0, r3
 8000252:	f240 811b 	bls.w	800048c <__udivmoddi4+0x298>
 8000256:	3f02      	subs	r7, #2
 8000258:	4463      	add	r3, ip
 800025a:	1a1b      	subs	r3, r3, r0
 800025c:	fbb3 f0f1 	udiv	r0, r3, r1
 8000260:	fb01 3310 	mls	r3, r1, r0, r3
 8000264:	fb00 fe0e 	mul.w	lr, r0, lr
 8000268:	b2a4      	uxth	r4, r4
 800026a:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026e:	45a6      	cmp	lr, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x94>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800027a:	f080 8109 	bcs.w	8000490 <__udivmoddi4+0x29c>
 800027e:	45a6      	cmp	lr, r4
 8000280:	f240 8106 	bls.w	8000490 <__udivmoddi4+0x29c>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	2100      	movs	r1, #0
 800028a:	eba4 040e 	sub.w	r4, r4, lr
 800028e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000292:	b11e      	cbz	r6, 800029c <__udivmoddi4+0xa8>
 8000294:	2300      	movs	r3, #0
 8000296:	40d4      	lsrs	r4, r2
 8000298:	e9c6 4300 	strd	r4, r3, [r6]
 800029c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d908      	bls.n	80002b6 <__udivmoddi4+0xc2>
 80002a4:	2e00      	cmp	r6, #0
 80002a6:	f000 80ee 	beq.w	8000486 <__udivmoddi4+0x292>
 80002aa:	2100      	movs	r1, #0
 80002ac:	e9c6 0500 	strd	r0, r5, [r6]
 80002b0:	4608      	mov	r0, r1
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d14a      	bne.n	8000354 <__udivmoddi4+0x160>
 80002be:	42ab      	cmp	r3, r5
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd4>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fc 	bhi.w	80004c0 <__udivmoddi4+0x2cc>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb65 0303 	sbc.w	r3, r5, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e2      	beq.n	800029c <__udivmoddi4+0xa8>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7df      	b.n	800029c <__udivmoddi4+0xa8>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xec>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 8091 	bne.w	800040c <__udivmoddi4+0x218>
 80002ea:	eba1 000c 	sub.w	r0, r1, ip
 80002ee:	2101      	movs	r1, #1
 80002f0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f4:	fa1f fe8c 	uxth.w	lr, ip
 80002f8:	fbb0 f3f7 	udiv	r3, r0, r7
 80002fc:	fb07 0013 	mls	r0, r7, r3, r0
 8000300:	0c25      	lsrs	r5, r4, #16
 8000302:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000306:	fb0e f003 	mul.w	r0, lr, r3
 800030a:	42a8      	cmp	r0, r5
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x12c>
 800030e:	eb1c 0505 	adds.w	r5, ip, r5
 8000312:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x12a>
 8000318:	42a8      	cmp	r0, r5
 800031a:	f200 80ce 	bhi.w	80004ba <__udivmoddi4+0x2c6>
 800031e:	4643      	mov	r3, r8
 8000320:	1a2d      	subs	r5, r5, r0
 8000322:	fbb5 f0f7 	udiv	r0, r5, r7
 8000326:	fb07 5510 	mls	r5, r7, r0, r5
 800032a:	fb0e fe00 	mul.w	lr, lr, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000334:	45a6      	cmp	lr, r4
 8000336:	d908      	bls.n	800034a <__udivmoddi4+0x156>
 8000338:	eb1c 0404 	adds.w	r4, ip, r4
 800033c:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x154>
 8000342:	45a6      	cmp	lr, r4
 8000344:	f200 80b6 	bhi.w	80004b4 <__udivmoddi4+0x2c0>
 8000348:	4628      	mov	r0, r5
 800034a:	eba4 040e 	sub.w	r4, r4, lr
 800034e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000352:	e79e      	b.n	8000292 <__udivmoddi4+0x9e>
 8000354:	f1c1 0720 	rsb	r7, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 fc07 	lsr.w	ip, r2, r7
 800035e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000362:	fa25 fa07 	lsr.w	sl, r5, r7
 8000366:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036a:	fbba f8f9 	udiv	r8, sl, r9
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	fb09 aa18 	mls	sl, r9, r8, sl
 8000376:	408d      	lsls	r5, r1
 8000378:	fa1f fe8c 	uxth.w	lr, ip
 800037c:	431d      	orrs	r5, r3
 800037e:	fa00 f301 	lsl.w	r3, r0, r1
 8000382:	fb08 f00e 	mul.w	r0, r8, lr
 8000386:	0c2c      	lsrs	r4, r5, #16
 8000388:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800038c:	42a0      	cmp	r0, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90b      	bls.n	80003ac <__udivmoddi4+0x1b8>
 8000394:	eb1c 0404 	adds.w	r4, ip, r4
 8000398:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 800039c:	f080 8088 	bcs.w	80004b0 <__udivmoddi4+0x2bc>
 80003a0:	42a0      	cmp	r0, r4
 80003a2:	f240 8085 	bls.w	80004b0 <__udivmoddi4+0x2bc>
 80003a6:	f1a8 0802 	sub.w	r8, r8, #2
 80003aa:	4464      	add	r4, ip
 80003ac:	1a24      	subs	r4, r4, r0
 80003ae:	fbb4 f0f9 	udiv	r0, r4, r9
 80003b2:	fb09 4410 	mls	r4, r9, r0, r4
 80003b6:	fb00 fe0e 	mul.w	lr, r0, lr
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c0:	45a6      	cmp	lr, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1e2>
 80003c4:	eb1c 0404 	adds.w	r4, ip, r4
 80003c8:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 80003cc:	d26c      	bcs.n	80004a8 <__udivmoddi4+0x2b4>
 80003ce:	45a6      	cmp	lr, r4
 80003d0:	d96a      	bls.n	80004a8 <__udivmoddi4+0x2b4>
 80003d2:	3802      	subs	r0, #2
 80003d4:	4464      	add	r4, ip
 80003d6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003da:	fba0 9502 	umull	r9, r5, r0, r2
 80003de:	eba4 040e 	sub.w	r4, r4, lr
 80003e2:	42ac      	cmp	r4, r5
 80003e4:	46c8      	mov	r8, r9
 80003e6:	46ae      	mov	lr, r5
 80003e8:	d356      	bcc.n	8000498 <__udivmoddi4+0x2a4>
 80003ea:	d053      	beq.n	8000494 <__udivmoddi4+0x2a0>
 80003ec:	2e00      	cmp	r6, #0
 80003ee:	d069      	beq.n	80004c4 <__udivmoddi4+0x2d0>
 80003f0:	ebb3 0208 	subs.w	r2, r3, r8
 80003f4:	eb64 040e 	sbc.w	r4, r4, lr
 80003f8:	fa22 f301 	lsr.w	r3, r2, r1
 80003fc:	fa04 f707 	lsl.w	r7, r4, r7
 8000400:	431f      	orrs	r7, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c6 7400 	strd	r7, r4, [r6]
 8000408:	2100      	movs	r1, #0
 800040a:	e747      	b.n	800029c <__udivmoddi4+0xa8>
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	f1c2 0120 	rsb	r1, r2, #32
 8000414:	fa25 f301 	lsr.w	r3, r5, r1
 8000418:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041c:	fa20 f101 	lsr.w	r1, r0, r1
 8000420:	4095      	lsls	r5, r2
 8000422:	430d      	orrs	r5, r1
 8000424:	fbb3 f1f7 	udiv	r1, r3, r7
 8000428:	fb07 3311 	mls	r3, r7, r1, r3
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	0c28      	lsrs	r0, r5, #16
 8000432:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000436:	fb01 f30e 	mul.w	r3, r1, lr
 800043a:	4283      	cmp	r3, r0
 800043c:	fa04 f402 	lsl.w	r4, r4, r2
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x260>
 8000442:	eb1c 0000 	adds.w	r0, ip, r0
 8000446:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
 800044a:	d22f      	bcs.n	80004ac <__udivmoddi4+0x2b8>
 800044c:	4283      	cmp	r3, r0
 800044e:	d92d      	bls.n	80004ac <__udivmoddi4+0x2b8>
 8000450:	3902      	subs	r1, #2
 8000452:	4460      	add	r0, ip
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	fbb0 f3f7 	udiv	r3, r0, r7
 800045a:	fb07 0013 	mls	r0, r7, r3, r0
 800045e:	b2ad      	uxth	r5, r5
 8000460:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000464:	fb03 f00e 	mul.w	r0, r3, lr
 8000468:	42a8      	cmp	r0, r5
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x28a>
 800046c:	eb1c 0505 	adds.w	r5, ip, r5
 8000470:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000474:	d216      	bcs.n	80004a4 <__udivmoddi4+0x2b0>
 8000476:	42a8      	cmp	r0, r5
 8000478:	d914      	bls.n	80004a4 <__udivmoddi4+0x2b0>
 800047a:	3b02      	subs	r3, #2
 800047c:	4465      	add	r5, ip
 800047e:	1a28      	subs	r0, r5, r0
 8000480:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000484:	e738      	b.n	80002f8 <__udivmoddi4+0x104>
 8000486:	4631      	mov	r1, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e707      	b.n	800029c <__udivmoddi4+0xa8>
 800048c:	462f      	mov	r7, r5
 800048e:	e6e4      	b.n	800025a <__udivmoddi4+0x66>
 8000490:	4618      	mov	r0, r3
 8000492:	e6f9      	b.n	8000288 <__udivmoddi4+0x94>
 8000494:	454b      	cmp	r3, r9
 8000496:	d2a9      	bcs.n	80003ec <__udivmoddi4+0x1f8>
 8000498:	ebb9 0802 	subs.w	r8, r9, r2
 800049c:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7a3      	b.n	80003ec <__udivmoddi4+0x1f8>
 80004a4:	4643      	mov	r3, r8
 80004a6:	e7ea      	b.n	800047e <__udivmoddi4+0x28a>
 80004a8:	4628      	mov	r0, r5
 80004aa:	e794      	b.n	80003d6 <__udivmoddi4+0x1e2>
 80004ac:	4641      	mov	r1, r8
 80004ae:	e7d1      	b.n	8000454 <__udivmoddi4+0x260>
 80004b0:	46d0      	mov	r8, sl
 80004b2:	e77b      	b.n	80003ac <__udivmoddi4+0x1b8>
 80004b4:	4464      	add	r4, ip
 80004b6:	3802      	subs	r0, #2
 80004b8:	e747      	b.n	800034a <__udivmoddi4+0x156>
 80004ba:	3b02      	subs	r3, #2
 80004bc:	4465      	add	r5, ip
 80004be:	e72f      	b.n	8000320 <__udivmoddi4+0x12c>
 80004c0:	4608      	mov	r0, r1
 80004c2:	e706      	b.n	80002d2 <__udivmoddi4+0xde>
 80004c4:	4631      	mov	r1, r6
 80004c6:	e6e9      	b.n	800029c <__udivmoddi4+0xa8>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d2:	f000 f93d 	bl	8000750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d6:	f000 f81d 	bl	8000514 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004da:	f000 f873 	bl	80005c4 <MX_GPIO_Init>
  MX_IWDG_Init();
 80004de:	f000 f857 	bl	8000590 <MX_IWDG_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  // zapis pierwszego czasu do porównania
  uint32_t last_time = HAL_GetTick();
 80004e2:	f000 f999 	bl	8000818 <HAL_GetTick>
 80004e6:	6078      	str	r0, [r7, #4]

  while (1)
  {
	  // zapis nowego czasu
	  uint32_t new_time = HAL_GetTick();
 80004e8:	f000 f996 	bl	8000818 <HAL_GetTick>
 80004ec:	6038      	str	r0, [r7, #0]

	  // 1s = 1000ms
	  // 5hz -> 5 razy na sek
	  // miganie co 200ms

	  if (new_time - last_time >= 200)
 80004ee:	683a      	ldr	r2, [r7, #0]
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	1ad3      	subs	r3, r2, r3
 80004f4:	2bc7      	cmp	r3, #199	; 0xc7
 80004f6:	d9f7      	bls.n	80004e8 <main+0x1c>
	  {
		  // zmiana stanu na pinie LED (PA5)
		  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80004f8:	2120      	movs	r1, #32
 80004fa:	4804      	ldr	r0, [pc, #16]	; (800050c <main+0x40>)
 80004fc:	f000 fc30 	bl	8000d60 <HAL_GPIO_TogglePin>
		  // nadpisanie starego czasu
		  last_time = new_time;
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	607b      	str	r3, [r7, #4]

		  // watchdog ma wartosc 4095
		  // dioda nie moze swiecic zadziej niz 4sek
		  HAL_IWDG_Refresh(&hiwdg);
 8000504:	4802      	ldr	r0, [pc, #8]	; (8000510 <main+0x44>)
 8000506:	f000 fc86 	bl	8000e16 <HAL_IWDG_Refresh>
  {
 800050a:	e7ed      	b.n	80004e8 <main+0x1c>
 800050c:	40020000 	.word	0x40020000
 8000510:	20000028 	.word	0x20000028

08000514 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b092      	sub	sp, #72	; 0x48
 8000518:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051a:	f107 0318 	add.w	r3, r7, #24
 800051e:	2230      	movs	r2, #48	; 0x30
 8000520:	2100      	movs	r1, #0
 8000522:	4618      	mov	r0, r3
 8000524:	f001 f8f4 	bl	8001710 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000528:	1d3b      	adds	r3, r7, #4
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]
 8000534:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000536:	230a      	movs	r3, #10
 8000538:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053a:	2301      	movs	r3, #1
 800053c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800053e:	2310      	movs	r3, #16
 8000540:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000542:	2301      	movs	r3, #1
 8000544:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000546:	2300      	movs	r3, #0
 8000548:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800054a:	f107 0318 	add.w	r3, r7, #24
 800054e:	4618      	mov	r0, r3
 8000550:	f000 fc70 	bl	8000e34 <HAL_RCC_OscConfig>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <SystemClock_Config+0x4a>
  {
    Error_Handler();
 800055a:	f000 f875 	bl	8000648 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800055e:	230f      	movs	r3, #15
 8000560:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000562:	2300      	movs	r3, #0
 8000564:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000566:	2300      	movs	r3, #0
 8000568:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800056a:	2300      	movs	r3, #0
 800056c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000572:	1d3b      	adds	r3, r7, #4
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f000 feb0 	bl	80012dc <HAL_RCC_ClockConfig>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000582:	f000 f861 	bl	8000648 <Error_Handler>
  }
}
 8000586:	bf00      	nop
 8000588:	3748      	adds	r7, #72	; 0x48
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000594:	4b09      	ldr	r3, [pc, #36]	; (80005bc <MX_IWDG_Init+0x2c>)
 8000596:	4a0a      	ldr	r2, [pc, #40]	; (80005c0 <MX_IWDG_Init+0x30>)
 8000598:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 800059a:	4b08      	ldr	r3, [pc, #32]	; (80005bc <MX_IWDG_Init+0x2c>)
 800059c:	2200      	movs	r2, #0
 800059e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Reload = 4095;
 80005a0:	4b06      	ldr	r3, [pc, #24]	; (80005bc <MX_IWDG_Init+0x2c>)
 80005a2:	f640 72ff 	movw	r2, #4095	; 0xfff
 80005a6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80005a8:	4804      	ldr	r0, [pc, #16]	; (80005bc <MX_IWDG_Init+0x2c>)
 80005aa:	f000 fbf2 	bl	8000d92 <HAL_IWDG_Init>
 80005ae:	4603      	mov	r3, r0
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	d001      	beq.n	80005b8 <MX_IWDG_Init+0x28>
  {
    Error_Handler();
 80005b4:	f000 f848 	bl	8000648 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80005b8:	bf00      	nop
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000028 	.word	0x20000028
 80005c0:	40003000 	.word	0x40003000

080005c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <MX_GPIO_Init+0x7c>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a17      	ldr	r2, [pc, #92]	; (8000640 <MX_GPIO_Init+0x7c>)
 80005e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <MX_GPIO_Init+0x7c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_GPIO_Init+0x7c>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a10      	ldr	r2, [pc, #64]	; (8000640 <MX_GPIO_Init+0x7c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_GPIO_Init+0x7c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000612:	2200      	movs	r2, #0
 8000614:	2120      	movs	r1, #32
 8000616:	480b      	ldr	r0, [pc, #44]	; (8000644 <MX_GPIO_Init+0x80>)
 8000618:	f000 fb8a 	bl	8000d30 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 800061c:	2320      	movs	r3, #32
 800061e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000620:	2301      	movs	r3, #1
 8000622:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000624:	2300      	movs	r3, #0
 8000626:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000628:	2300      	movs	r3, #0
 800062a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	4619      	mov	r1, r3
 8000632:	4804      	ldr	r0, [pc, #16]	; (8000644 <MX_GPIO_Init+0x80>)
 8000634:	f000 f9de 	bl	80009f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000638:	bf00      	nop
 800063a:	3720      	adds	r7, #32
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40023800 	.word	0x40023800
 8000644:	40020000 	.word	0x40020000

08000648 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000648:	b480      	push	{r7}
 800064a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800064c:	b672      	cpsid	i
}
 800064e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000650:	e7fe      	b.n	8000650 <Error_Handler+0x8>
	...

08000654 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800065a:	2300      	movs	r3, #0
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	4b0f      	ldr	r3, [pc, #60]	; (800069c <HAL_MspInit+0x48>)
 8000660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000662:	4a0e      	ldr	r2, [pc, #56]	; (800069c <HAL_MspInit+0x48>)
 8000664:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000668:	6453      	str	r3, [r2, #68]	; 0x44
 800066a:	4b0c      	ldr	r3, [pc, #48]	; (800069c <HAL_MspInit+0x48>)
 800066c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800066e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000676:	2300      	movs	r3, #0
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	4b08      	ldr	r3, [pc, #32]	; (800069c <HAL_MspInit+0x48>)
 800067c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067e:	4a07      	ldr	r2, [pc, #28]	; (800069c <HAL_MspInit+0x48>)
 8000680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000684:	6413      	str	r3, [r2, #64]	; 0x40
 8000686:	4b05      	ldr	r3, [pc, #20]	; (800069c <HAL_MspInit+0x48>)
 8000688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	bc80      	pop	{r7}
 800069a:	4770      	bx	lr
 800069c:	40023800 	.word	0x40023800

080006a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006a4:	e7fe      	b.n	80006a4 <NMI_Handler+0x4>

080006a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006a6:	b480      	push	{r7}
 80006a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006aa:	e7fe      	b.n	80006aa <HardFault_Handler+0x4>

080006ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <MemManage_Handler+0x4>

080006b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b2:	b480      	push	{r7}
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006b6:	e7fe      	b.n	80006b6 <BusFault_Handler+0x4>

080006b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006b8:	b480      	push	{r7}
 80006ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006bc:	e7fe      	b.n	80006bc <UsageFault_Handler+0x4>

080006be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006be:	b480      	push	{r7}
 80006c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c2:	bf00      	nop
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bc80      	pop	{r7}
 80006c8:	4770      	bx	lr

080006ca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006ca:	b480      	push	{r7}
 80006cc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bc80      	pop	{r7}
 80006d4:	4770      	bx	lr

080006d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006d6:	b480      	push	{r7}
 80006d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006da:	bf00      	nop
 80006dc:	46bd      	mov	sp, r7
 80006de:	bc80      	pop	{r7}
 80006e0:	4770      	bx	lr

080006e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006e2:	b580      	push	{r7, lr}
 80006e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006e6:	f000 f885 	bl	80007f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}

080006ee <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006ee:	b480      	push	{r7}
 80006f0:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f2:	bf00      	nop
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
	...

080006fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80006fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000734 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit 
 8000700:	f7ff fff5 	bl	80006ee <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000704:	480c      	ldr	r0, [pc, #48]	; (8000738 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000706:	490d      	ldr	r1, [pc, #52]	; (800073c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000708:	4a0d      	ldr	r2, [pc, #52]	; (8000740 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800070c:	e002      	b.n	8000714 <LoopCopyDataInit>

0800070e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800070e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000710:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000712:	3304      	adds	r3, #4

08000714 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000714:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000716:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000718:	d3f9      	bcc.n	800070e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071a:	4a0a      	ldr	r2, [pc, #40]	; (8000744 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800071c:	4c0a      	ldr	r4, [pc, #40]	; (8000748 <LoopFillZerobss+0x22>)
  movs r3, #0
 800071e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000720:	e001      	b.n	8000726 <LoopFillZerobss>

08000722 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000722:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000724:	3204      	adds	r2, #4

08000726 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000726:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000728:	d3fb      	bcc.n	8000722 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800072a:	f000 ffcd 	bl	80016c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800072e:	f7ff fecd 	bl	80004cc <main>
  bx  lr    
 8000732:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000734:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800073c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000740:	08001758 	.word	0x08001758
  ldr r2, =_sbss
 8000744:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000748:	20000038 	.word	0x20000038

0800074c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800074c:	e7fe      	b.n	800074c <ADC_IRQHandler>
	...

08000750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
   __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000754:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <HAL_Init+0x40>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4a0d      	ldr	r2, [pc, #52]	; (8000790 <HAL_Init+0x40>)
 800075a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800075e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
   __HAL_FLASH_DATA_CACHE_ENABLE();
 8000760:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <HAL_Init+0x40>)
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a0a      	ldr	r2, [pc, #40]	; (8000790 <HAL_Init+0x40>)
 8000766:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800076a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <HAL_Init+0x40>)
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a07      	ldr	r2, [pc, #28]	; (8000790 <HAL_Init+0x40>)
 8000772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000776:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000778:	2003      	movs	r0, #3
 800077a:	f000 f907 	bl	800098c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800077e:	200f      	movs	r0, #15
 8000780:	f000 f808 	bl	8000794 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000784:	f7ff ff66 	bl	8000654 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000788:	2300      	movs	r3, #0
}
 800078a:	4618      	mov	r0, r3
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40023c00 	.word	0x40023c00

08000794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800079c:	4b12      	ldr	r3, [pc, #72]	; (80007e8 <HAL_InitTick+0x54>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <HAL_InitTick+0x58>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4619      	mov	r1, r3
 80007a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 f911 	bl	80009da <HAL_SYSTICK_Config>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007be:	2301      	movs	r3, #1
 80007c0:	e00e      	b.n	80007e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2b0f      	cmp	r3, #15
 80007c6:	d80a      	bhi.n	80007de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007c8:	2200      	movs	r2, #0
 80007ca:	6879      	ldr	r1, [r7, #4]
 80007cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007d0:	f000 f8e7 	bl	80009a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007d4:	4a06      	ldr	r2, [pc, #24]	; (80007f0 <HAL_InitTick+0x5c>)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007da:	2300      	movs	r3, #0
 80007dc:	e000      	b.n	80007e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007de:	2301      	movs	r3, #1
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3708      	adds	r7, #8
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000000 	.word	0x20000000
 80007ec:	20000008 	.word	0x20000008
 80007f0:	20000004 	.word	0x20000004

080007f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <HAL_IncTick+0x1c>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b05      	ldr	r3, [pc, #20]	; (8000814 <HAL_IncTick+0x20>)
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4413      	add	r3, r2
 8000804:	4a03      	ldr	r2, [pc, #12]	; (8000814 <HAL_IncTick+0x20>)
 8000806:	6013      	str	r3, [r2, #0]
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr
 8000810:	20000008 	.word	0x20000008
 8000814:	20000034 	.word	0x20000034

08000818 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  return uwTick;
 800081c:	4b02      	ldr	r3, [pc, #8]	; (8000828 <HAL_GetTick+0x10>)
 800081e:	681b      	ldr	r3, [r3, #0]
}
 8000820:	4618      	mov	r0, r3
 8000822:	46bd      	mov	sp, r7
 8000824:	bc80      	pop	{r7}
 8000826:	4770      	bx	lr
 8000828:	20000034 	.word	0x20000034

0800082c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800082c:	b480      	push	{r7}
 800082e:	b085      	sub	sp, #20
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <__NVIC_SetPriorityGrouping+0x44>)
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000842:	68ba      	ldr	r2, [r7, #8]
 8000844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000848:	4013      	ands	r3, r2
 800084a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000854:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800085c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800085e:	4a04      	ldr	r2, [pc, #16]	; (8000870 <__NVIC_SetPriorityGrouping+0x44>)
 8000860:	68bb      	ldr	r3, [r7, #8]
 8000862:	60d3      	str	r3, [r2, #12]
}
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	e000ed00 	.word	0xe000ed00

08000874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000878:	4b04      	ldr	r3, [pc, #16]	; (800088c <__NVIC_GetPriorityGrouping+0x18>)
 800087a:	68db      	ldr	r3, [r3, #12]
 800087c:	0a1b      	lsrs	r3, r3, #8
 800087e:	f003 0307 	and.w	r3, r3, #7
}
 8000882:	4618      	mov	r0, r3
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	e000ed00 	.word	0xe000ed00

08000890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
 8000896:	4603      	mov	r3, r0
 8000898:	6039      	str	r1, [r7, #0]
 800089a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800089c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	db0a      	blt.n	80008ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	b2da      	uxtb	r2, r3
 80008a8:	490c      	ldr	r1, [pc, #48]	; (80008dc <__NVIC_SetPriority+0x4c>)
 80008aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ae:	0112      	lsls	r2, r2, #4
 80008b0:	b2d2      	uxtb	r2, r2
 80008b2:	440b      	add	r3, r1
 80008b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008b8:	e00a      	b.n	80008d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	b2da      	uxtb	r2, r3
 80008be:	4908      	ldr	r1, [pc, #32]	; (80008e0 <__NVIC_SetPriority+0x50>)
 80008c0:	79fb      	ldrb	r3, [r7, #7]
 80008c2:	f003 030f 	and.w	r3, r3, #15
 80008c6:	3b04      	subs	r3, #4
 80008c8:	0112      	lsls	r2, r2, #4
 80008ca:	b2d2      	uxtb	r2, r2
 80008cc:	440b      	add	r3, r1
 80008ce:	761a      	strb	r2, [r3, #24]
}
 80008d0:	bf00      	nop
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bc80      	pop	{r7}
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	e000e100 	.word	0xe000e100
 80008e0:	e000ed00 	.word	0xe000ed00

080008e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008e4:	b480      	push	{r7}
 80008e6:	b089      	sub	sp, #36	; 0x24
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	60f8      	str	r0, [r7, #12]
 80008ec:	60b9      	str	r1, [r7, #8]
 80008ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	f003 0307 	and.w	r3, r3, #7
 80008f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80008f8:	69fb      	ldr	r3, [r7, #28]
 80008fa:	f1c3 0307 	rsb	r3, r3, #7
 80008fe:	2b04      	cmp	r3, #4
 8000900:	bf28      	it	cs
 8000902:	2304      	movcs	r3, #4
 8000904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000906:	69fb      	ldr	r3, [r7, #28]
 8000908:	3304      	adds	r3, #4
 800090a:	2b06      	cmp	r3, #6
 800090c:	d902      	bls.n	8000914 <NVIC_EncodePriority+0x30>
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	3b03      	subs	r3, #3
 8000912:	e000      	b.n	8000916 <NVIC_EncodePriority+0x32>
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000918:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800091c:	69bb      	ldr	r3, [r7, #24]
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	43da      	mvns	r2, r3
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	401a      	ands	r2, r3
 8000928:	697b      	ldr	r3, [r7, #20]
 800092a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800092c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	fa01 f303 	lsl.w	r3, r1, r3
 8000936:	43d9      	mvns	r1, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800093c:	4313      	orrs	r3, r2
         );
}
 800093e:	4618      	mov	r0, r3
 8000940:	3724      	adds	r7, #36	; 0x24
 8000942:	46bd      	mov	sp, r7
 8000944:	bc80      	pop	{r7}
 8000946:	4770      	bx	lr

08000948 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b082      	sub	sp, #8
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	3b01      	subs	r3, #1
 8000954:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000958:	d301      	bcc.n	800095e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800095a:	2301      	movs	r3, #1
 800095c:	e00f      	b.n	800097e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800095e:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <SysTick_Config+0x40>)
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	3b01      	subs	r3, #1
 8000964:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000966:	210f      	movs	r1, #15
 8000968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800096c:	f7ff ff90 	bl	8000890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000970:	4b05      	ldr	r3, [pc, #20]	; (8000988 <SysTick_Config+0x40>)
 8000972:	2200      	movs	r2, #0
 8000974:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000976:	4b04      	ldr	r3, [pc, #16]	; (8000988 <SysTick_Config+0x40>)
 8000978:	2207      	movs	r2, #7
 800097a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800097c:	2300      	movs	r3, #0
}
 800097e:	4618      	mov	r0, r3
 8000980:	3708      	adds	r7, #8
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}
 8000986:	bf00      	nop
 8000988:	e000e010 	.word	0xe000e010

0800098c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b082      	sub	sp, #8
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff ff49 	bl	800082c <__NVIC_SetPriorityGrouping>
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}

080009a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009a2:	b580      	push	{r7, lr}
 80009a4:	b086      	sub	sp, #24
 80009a6:	af00      	add	r7, sp, #0
 80009a8:	4603      	mov	r3, r0
 80009aa:	60b9      	str	r1, [r7, #8]
 80009ac:	607a      	str	r2, [r7, #4]
 80009ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009b0:	2300      	movs	r3, #0
 80009b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009b4:	f7ff ff5e 	bl	8000874 <__NVIC_GetPriorityGrouping>
 80009b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009ba:	687a      	ldr	r2, [r7, #4]
 80009bc:	68b9      	ldr	r1, [r7, #8]
 80009be:	6978      	ldr	r0, [r7, #20]
 80009c0:	f7ff ff90 	bl	80008e4 <NVIC_EncodePriority>
 80009c4:	4602      	mov	r2, r0
 80009c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009ca:	4611      	mov	r1, r2
 80009cc:	4618      	mov	r0, r3
 80009ce:	f7ff ff5f 	bl	8000890 <__NVIC_SetPriority>
}
 80009d2:	bf00      	nop
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}

080009da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	b082      	sub	sp, #8
 80009de:	af00      	add	r7, sp, #0
 80009e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f7ff ffb0 	bl	8000948 <SysTick_Config>
 80009e8:	4603      	mov	r3, r0
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3708      	adds	r7, #8
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
	...

080009f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b087      	sub	sp, #28
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a02:	e16f      	b.n	8000ce4 <HAL_GPIO_Init+0x2f0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	681a      	ldr	r2, [r3, #0]
 8000a08:	2101      	movs	r1, #1
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a10:	4013      	ands	r3, r2
 8000a12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a14:	68fb      	ldr	r3, [r7, #12]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	f000 8161 	beq.w	8000cde <HAL_GPIO_Init+0x2ea>
    {
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a1c:	683b      	ldr	r3, [r7, #0]
 8000a1e:	685b      	ldr	r3, [r3, #4]
 8000a20:	f003 0303 	and.w	r3, r3, #3
 8000a24:	2b01      	cmp	r3, #1
 8000a26:	d005      	beq.n	8000a34 <HAL_GPIO_Init+0x40>
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	f003 0303 	and.w	r3, r3, #3
 8000a30:	2b02      	cmp	r3, #2
 8000a32:	d130      	bne.n	8000a96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	689b      	ldr	r3, [r3, #8]
 8000a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a3a:	697b      	ldr	r3, [r7, #20]
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	2203      	movs	r2, #3
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	43db      	mvns	r3, r3
 8000a46:	693a      	ldr	r2, [r7, #16]
 8000a48:	4013      	ands	r3, r2
 8000a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	68da      	ldr	r2, [r3, #12]
 8000a50:	697b      	ldr	r3, [r7, #20]
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	fa02 f303 	lsl.w	r3, r2, r3
 8000a58:	693a      	ldr	r2, [r7, #16]
 8000a5a:	4313      	orrs	r3, r2
 8000a5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	685b      	ldr	r3, [r3, #4]
 8000a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a72:	43db      	mvns	r3, r3
 8000a74:	693a      	ldr	r2, [r7, #16]
 8000a76:	4013      	ands	r3, r2
 8000a78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	685b      	ldr	r3, [r3, #4]
 8000a7e:	091b      	lsrs	r3, r3, #4
 8000a80:	f003 0201 	and.w	r2, r3, #1
 8000a84:	697b      	ldr	r3, [r7, #20]
 8000a86:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8a:	693a      	ldr	r2, [r7, #16]
 8000a8c:	4313      	orrs	r3, r2
 8000a8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	693a      	ldr	r2, [r7, #16]
 8000a94:	605a      	str	r2, [r3, #4]
      }
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f003 0303 	and.w	r3, r3, #3
 8000a9e:	2b03      	cmp	r3, #3
 8000aa0:	d017      	beq.n	8000ad2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	68db      	ldr	r3, [r3, #12]
 8000aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	005b      	lsls	r3, r3, #1
 8000aac:	2203      	movs	r2, #3
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	43db      	mvns	r3, r3
 8000ab4:	693a      	ldr	r2, [r7, #16]
 8000ab6:	4013      	ands	r3, r2
 8000ab8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	689a      	ldr	r2, [r3, #8]
 8000abe:	697b      	ldr	r3, [r7, #20]
 8000ac0:	005b      	lsls	r3, r3, #1
 8000ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	685b      	ldr	r3, [r3, #4]
 8000ad6:	f003 0303 	and.w	r3, r3, #3
 8000ada:	2b02      	cmp	r3, #2
 8000adc:	d123      	bne.n	8000b26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	08da      	lsrs	r2, r3, #3
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	3208      	adds	r2, #8
 8000ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000aea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	f003 0307 	and.w	r3, r3, #7
 8000af2:	009b      	lsls	r3, r3, #2
 8000af4:	220f      	movs	r2, #15
 8000af6:	fa02 f303 	lsl.w	r3, r2, r3
 8000afa:	43db      	mvns	r3, r3
 8000afc:	693a      	ldr	r2, [r7, #16]
 8000afe:	4013      	ands	r3, r2
 8000b00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	691a      	ldr	r2, [r3, #16]
 8000b06:	697b      	ldr	r3, [r7, #20]
 8000b08:	f003 0307 	and.w	r3, r3, #7
 8000b0c:	009b      	lsls	r3, r3, #2
 8000b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b18:	697b      	ldr	r3, [r7, #20]
 8000b1a:	08da      	lsrs	r2, r3, #3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	3208      	adds	r2, #8
 8000b20:	6939      	ldr	r1, [r7, #16]
 8000b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	005b      	lsls	r3, r3, #1
 8000b30:	2203      	movs	r2, #3
 8000b32:	fa02 f303 	lsl.w	r3, r2, r3
 8000b36:	43db      	mvns	r3, r3
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	4013      	ands	r3, r2
 8000b3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	f003 0203 	and.w	r2, r3, #3
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	693a      	ldr	r2, [r7, #16]
 8000b58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	685b      	ldr	r3, [r3, #4]
 8000b5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	f000 80bb 	beq.w	8000cde <HAL_GPIO_Init+0x2ea>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60bb      	str	r3, [r7, #8]
 8000b6c:	4b64      	ldr	r3, [pc, #400]	; (8000d00 <HAL_GPIO_Init+0x30c>)
 8000b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b70:	4a63      	ldr	r2, [pc, #396]	; (8000d00 <HAL_GPIO_Init+0x30c>)
 8000b72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b76:	6453      	str	r3, [r2, #68]	; 0x44
 8000b78:	4b61      	ldr	r3, [pc, #388]	; (8000d00 <HAL_GPIO_Init+0x30c>)
 8000b7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b84:	4a5f      	ldr	r2, [pc, #380]	; (8000d04 <HAL_GPIO_Init+0x310>)
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	089b      	lsrs	r3, r3, #2
 8000b8a:	3302      	adds	r3, #2
 8000b8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b90:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	f003 0303 	and.w	r3, r3, #3
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	220f      	movs	r2, #15
 8000b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba0:	43db      	mvns	r3, r3
 8000ba2:	693a      	ldr	r2, [r7, #16]
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a57      	ldr	r2, [pc, #348]	; (8000d08 <HAL_GPIO_Init+0x314>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d031      	beq.n	8000c14 <HAL_GPIO_Init+0x220>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a56      	ldr	r2, [pc, #344]	; (8000d0c <HAL_GPIO_Init+0x318>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d02b      	beq.n	8000c10 <HAL_GPIO_Init+0x21c>
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	4a55      	ldr	r2, [pc, #340]	; (8000d10 <HAL_GPIO_Init+0x31c>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d025      	beq.n	8000c0c <HAL_GPIO_Init+0x218>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	4a54      	ldr	r2, [pc, #336]	; (8000d14 <HAL_GPIO_Init+0x320>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d01f      	beq.n	8000c08 <HAL_GPIO_Init+0x214>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a53      	ldr	r2, [pc, #332]	; (8000d18 <HAL_GPIO_Init+0x324>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d019      	beq.n	8000c04 <HAL_GPIO_Init+0x210>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a52      	ldr	r2, [pc, #328]	; (8000d1c <HAL_GPIO_Init+0x328>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d013      	beq.n	8000c00 <HAL_GPIO_Init+0x20c>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a51      	ldr	r2, [pc, #324]	; (8000d20 <HAL_GPIO_Init+0x32c>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d00d      	beq.n	8000bfc <HAL_GPIO_Init+0x208>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a50      	ldr	r2, [pc, #320]	; (8000d24 <HAL_GPIO_Init+0x330>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d007      	beq.n	8000bf8 <HAL_GPIO_Init+0x204>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	4a4f      	ldr	r2, [pc, #316]	; (8000d28 <HAL_GPIO_Init+0x334>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d101      	bne.n	8000bf4 <HAL_GPIO_Init+0x200>
 8000bf0:	2308      	movs	r3, #8
 8000bf2:	e010      	b.n	8000c16 <HAL_GPIO_Init+0x222>
 8000bf4:	2309      	movs	r3, #9
 8000bf6:	e00e      	b.n	8000c16 <HAL_GPIO_Init+0x222>
 8000bf8:	2307      	movs	r3, #7
 8000bfa:	e00c      	b.n	8000c16 <HAL_GPIO_Init+0x222>
 8000bfc:	2306      	movs	r3, #6
 8000bfe:	e00a      	b.n	8000c16 <HAL_GPIO_Init+0x222>
 8000c00:	2305      	movs	r3, #5
 8000c02:	e008      	b.n	8000c16 <HAL_GPIO_Init+0x222>
 8000c04:	2304      	movs	r3, #4
 8000c06:	e006      	b.n	8000c16 <HAL_GPIO_Init+0x222>
 8000c08:	2303      	movs	r3, #3
 8000c0a:	e004      	b.n	8000c16 <HAL_GPIO_Init+0x222>
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	e002      	b.n	8000c16 <HAL_GPIO_Init+0x222>
 8000c10:	2301      	movs	r3, #1
 8000c12:	e000      	b.n	8000c16 <HAL_GPIO_Init+0x222>
 8000c14:	2300      	movs	r3, #0
 8000c16:	697a      	ldr	r2, [r7, #20]
 8000c18:	f002 0203 	and.w	r2, r2, #3
 8000c1c:	0092      	lsls	r2, r2, #2
 8000c1e:	4093      	lsls	r3, r2
 8000c20:	461a      	mov	r2, r3
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	4313      	orrs	r3, r2
 8000c26:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c28:	4936      	ldr	r1, [pc, #216]	; (8000d04 <HAL_GPIO_Init+0x310>)
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	089b      	lsrs	r3, r3, #2
 8000c2e:	3302      	adds	r3, #2
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c36:	4b3d      	ldr	r3, [pc, #244]	; (8000d2c <HAL_GPIO_Init+0x338>)
 8000c38:	689b      	ldr	r3, [r3, #8]
 8000c3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	43db      	mvns	r3, r3
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	4013      	ands	r3, r2
 8000c44:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d003      	beq.n	8000c5a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8000c52:	693a      	ldr	r2, [r7, #16]
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000c5a:	4a34      	ldr	r2, [pc, #208]	; (8000d2c <HAL_GPIO_Init+0x338>)
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000c60:	4b32      	ldr	r3, [pc, #200]	; (8000d2c <HAL_GPIO_Init+0x338>)
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	43db      	mvns	r3, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4013      	ands	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d003      	beq.n	8000c84 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000c84:	4a29      	ldr	r2, [pc, #164]	; (8000d2c <HAL_GPIO_Init+0x338>)
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000c8a:	4b28      	ldr	r3, [pc, #160]	; (8000d2c <HAL_GPIO_Init+0x338>)
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	43db      	mvns	r3, r3
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	4013      	ands	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d003      	beq.n	8000cae <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	4313      	orrs	r3, r2
 8000cac:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000cae:	4a1f      	ldr	r2, [pc, #124]	; (8000d2c <HAL_GPIO_Init+0x338>)
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000cb4:	4b1d      	ldr	r3, [pc, #116]	; (8000d2c <HAL_GPIO_Init+0x338>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	43db      	mvns	r3, r3
 8000cbe:	693a      	ldr	r2, [r7, #16]
 8000cc0:	4013      	ands	r3, r2
 8000cc2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d003      	beq.n	8000cd8 <HAL_GPIO_Init+0x2e4>
        {
          temp |= iocurrent;
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000cd8:	4a14      	ldr	r2, [pc, #80]	; (8000d2c <HAL_GPIO_Init+0x338>)
 8000cda:	693b      	ldr	r3, [r7, #16]
 8000cdc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	fa22 f303 	lsr.w	r3, r2, r3
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	f47f ae88 	bne.w	8000a04 <HAL_GPIO_Init+0x10>
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	bf00      	nop
 8000cf8:	371c      	adds	r7, #28
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bc80      	pop	{r7}
 8000cfe:	4770      	bx	lr
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40013800 	.word	0x40013800
 8000d08:	40020000 	.word	0x40020000
 8000d0c:	40020400 	.word	0x40020400
 8000d10:	40020800 	.word	0x40020800
 8000d14:	40020c00 	.word	0x40020c00
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	40021400 	.word	0x40021400
 8000d20:	40021800 	.word	0x40021800
 8000d24:	40021c00 	.word	0x40021c00
 8000d28:	40022000 	.word	0x40022000
 8000d2c:	40013c00 	.word	0x40013c00

08000d30 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d30:	b480      	push	{r7}
 8000d32:	b083      	sub	sp, #12
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
 8000d38:	460b      	mov	r3, r1
 8000d3a:	807b      	strh	r3, [r7, #2]
 8000d3c:	4613      	mov	r3, r2
 8000d3e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000d40:	787b      	ldrb	r3, [r7, #1]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d003      	beq.n	8000d4e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d46:	887a      	ldrh	r2, [r7, #2]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000d4c:	e003      	b.n	8000d56 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000d4e:	887b      	ldrh	r3, [r7, #2]
 8000d50:	041a      	lsls	r2, r3, #16
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	619a      	str	r2, [r3, #24]
}
 8000d56:	bf00      	nop
 8000d58:	370c      	adds	r7, #12
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bc80      	pop	{r7}
 8000d5e:	4770      	bx	lr

08000d60 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..I) to select the GPIO peripheral. 
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	695b      	ldr	r3, [r3, #20]
 8000d70:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000d72:	887a      	ldrh	r2, [r7, #2]
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4013      	ands	r3, r2
 8000d78:	041a      	lsls	r2, r3, #16
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	43d9      	mvns	r1, r3
 8000d7e:	887b      	ldrh	r3, [r7, #2]
 8000d80:	400b      	ands	r3, r1
 8000d82:	431a      	orrs	r2, r3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	619a      	str	r2, [r3, #24]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bc80      	pop	{r7}
 8000d90:	4770      	bx	lr

08000d92 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8000d92:	b580      	push	{r7, lr}
 8000d94:	b084      	sub	sp, #16
 8000d96:	af00      	add	r7, sp, #0
 8000d98:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d101      	bne.n	8000da4 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8000da0:	2301      	movs	r3, #1
 8000da2:	e034      	b.n	8000e0e <HAL_IWDG_Init+0x7c>
  assert_param(IS_IWDG_ALL_INSTANCE(hiwdg->Instance));
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8000dac:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR and IWDG_RLR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f245 5255 	movw	r2, #21845	; 0x5555
 8000db6:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	6852      	ldr	r2, [r2, #4]
 8000dc0:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	687a      	ldr	r2, [r7, #4]
 8000dc8:	6892      	ldr	r2, [r2, #8]
 8000dca:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8000dcc:	f7ff fd24 	bl	8000818 <HAL_GetTick>
 8000dd0:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8000dd2:	e00f      	b.n	8000df4 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8000dd4:	f7ff fd20 	bl	8000818 <HAL_GetTick>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	1ad3      	subs	r3, r2, r3
 8000dde:	2b31      	cmp	r3, #49	; 0x31
 8000de0:	d908      	bls.n	8000df4 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	68db      	ldr	r3, [r3, #12]
 8000de8:	f003 0303 	and.w	r3, r3, #3
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d001      	beq.n	8000df4 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8000df0:	2303      	movs	r3, #3
 8000df2:	e00c      	b.n	8000e0e <HAL_IWDG_Init+0x7c>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	68db      	ldr	r3, [r3, #12]
 8000dfa:	f003 0303 	and.w	r3, r3, #3
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d1e8      	bne.n	8000dd4 <HAL_IWDG_Init+0x42>
      }
    }
  }

  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000e0a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8000e0c:	2300      	movs	r3, #0
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	3710      	adds	r7, #16
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000e26:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bc80      	pop	{r7}
 8000e32:	4770      	bx	lr

08000e34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b08a      	sub	sp, #40	; 0x28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d101      	bne.n	8000e46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e42:	2301      	movs	r3, #1
 8000e44:	e23b      	b.n	80012be <HAL_RCC_OscConfig+0x48a>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f003 0301 	and.w	r3, r3, #1
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d050      	beq.n	8000ef4 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e52:	4b9e      	ldr	r3, [pc, #632]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000e54:	689b      	ldr	r3, [r3, #8]
 8000e56:	f003 030c 	and.w	r3, r3, #12
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	d00c      	beq.n	8000e78 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e5e:	4b9b      	ldr	r3, [pc, #620]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000e66:	2b08      	cmp	r3, #8
 8000e68:	d112      	bne.n	8000e90 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000e6a:	4b98      	ldr	r3, [pc, #608]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e72:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000e76:	d10b      	bne.n	8000e90 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e78:	4b94      	ldr	r3, [pc, #592]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d036      	beq.n	8000ef2 <HAL_RCC_OscConfig+0xbe>
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d132      	bne.n	8000ef2 <HAL_RCC_OscConfig+0xbe>
      {
        return HAL_ERROR;
 8000e8c:	2301      	movs	r3, #1
 8000e8e:	e216      	b.n	80012be <HAL_RCC_OscConfig+0x48a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	685a      	ldr	r2, [r3, #4]
 8000e94:	4b8e      	ldr	r3, [pc, #568]	; (80010d0 <HAL_RCC_OscConfig+0x29c>)
 8000e96:	b2d2      	uxtb	r2, r2
 8000e98:	701a      	strb	r2, [r3, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d013      	beq.n	8000eca <HAL_RCC_OscConfig+0x96>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ea2:	f7ff fcb9 	bl	8000818 <HAL_GetTick>
 8000ea6:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ea8:	e008      	b.n	8000ebc <HAL_RCC_OscConfig+0x88>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000eaa:	f7ff fcb5 	bl	8000818 <HAL_GetTick>
 8000eae:	4602      	mov	r2, r0
 8000eb0:	6a3b      	ldr	r3, [r7, #32]
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	2b64      	cmp	r3, #100	; 0x64
 8000eb6:	d901      	bls.n	8000ebc <HAL_RCC_OscConfig+0x88>
          {
            return HAL_TIMEOUT;
 8000eb8:	2303      	movs	r3, #3
 8000eba:	e200      	b.n	80012be <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ebc:	4b83      	ldr	r3, [pc, #524]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0f0      	beq.n	8000eaa <HAL_RCC_OscConfig+0x76>
 8000ec8:	e014      	b.n	8000ef4 <HAL_RCC_OscConfig+0xc0>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eca:	f7ff fca5 	bl	8000818 <HAL_GetTick>
 8000ece:	6238      	str	r0, [r7, #32]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ed0:	e008      	b.n	8000ee4 <HAL_RCC_OscConfig+0xb0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ed2:	f7ff fca1 	bl	8000818 <HAL_GetTick>
 8000ed6:	4602      	mov	r2, r0
 8000ed8:	6a3b      	ldr	r3, [r7, #32]
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	2b64      	cmp	r3, #100	; 0x64
 8000ede:	d901      	bls.n	8000ee4 <HAL_RCC_OscConfig+0xb0>
          {
            return HAL_TIMEOUT;
 8000ee0:	2303      	movs	r3, #3
 8000ee2:	e1ec      	b.n	80012be <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ee4:	4b79      	ldr	r3, [pc, #484]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d1f0      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x9e>
 8000ef0:	e000      	b.n	8000ef4 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ef2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 0302 	and.w	r3, r3, #2
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d077      	beq.n	8000ff0 <HAL_RCC_OscConfig+0x1bc>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f00:	4b72      	ldr	r3, [pc, #456]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000f02:	689b      	ldr	r3, [r3, #8]
 8000f04:	f003 030c 	and.w	r3, r3, #12
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d00b      	beq.n	8000f24 <HAL_RCC_OscConfig+0xf0>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f0c:	4b6f      	ldr	r3, [pc, #444]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000f0e:	689b      	ldr	r3, [r3, #8]
 8000f10:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000f14:	2b08      	cmp	r3, #8
 8000f16:	d126      	bne.n	8000f66 <HAL_RCC_OscConfig+0x132>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000f18:	4b6c      	ldr	r3, [pc, #432]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d120      	bne.n	8000f66 <HAL_RCC_OscConfig+0x132>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f24:	4b69      	ldr	r3, [pc, #420]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f003 0302 	and.w	r3, r3, #2
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d005      	beq.n	8000f3c <HAL_RCC_OscConfig+0x108>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d001      	beq.n	8000f3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e1c0      	b.n	80012be <HAL_RCC_OscConfig+0x48a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f3c:	4b63      	ldr	r3, [pc, #396]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	691b      	ldr	r3, [r3, #16]
 8000f48:	21f8      	movs	r1, #248	; 0xf8
 8000f4a:	61b9      	str	r1, [r7, #24]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f4c:	69b9      	ldr	r1, [r7, #24]
 8000f4e:	fa91 f1a1 	rbit	r1, r1
 8000f52:	6179      	str	r1, [r7, #20]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000f54:	6979      	ldr	r1, [r7, #20]
 8000f56:	fab1 f181 	clz	r1, r1
 8000f5a:	b2c9      	uxtb	r1, r1
 8000f5c:	408b      	lsls	r3, r1
 8000f5e:	495b      	ldr	r1, [pc, #364]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000f60:	4313      	orrs	r3, r2
 8000f62:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000f64:	e044      	b.n	8000ff0 <HAL_RCC_OscConfig+0x1bc>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	68db      	ldr	r3, [r3, #12]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d02a      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x190>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000f6e:	4b59      	ldr	r3, [pc, #356]	; (80010d4 <HAL_RCC_OscConfig+0x2a0>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fc50 	bl	8000818 <HAL_GetTick>
 8000f78:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000f7c:	f7ff fc4c 	bl	8000818 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	6a3b      	ldr	r3, [r7, #32]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b02      	cmp	r3, #2
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e197      	b.n	80012be <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000f8e:	4b4f      	ldr	r3, [pc, #316]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0302 	and.w	r3, r3, #2
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0f0      	beq.n	8000f7c <HAL_RCC_OscConfig+0x148>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f9a:	4b4c      	ldr	r3, [pc, #304]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	691b      	ldr	r3, [r3, #16]
 8000fa6:	21f8      	movs	r1, #248	; 0xf8
 8000fa8:	6139      	str	r1, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000faa:	6939      	ldr	r1, [r7, #16]
 8000fac:	fa91 f1a1 	rbit	r1, r1
 8000fb0:	60f9      	str	r1, [r7, #12]
  return result;
 8000fb2:	68f9      	ldr	r1, [r7, #12]
 8000fb4:	fab1 f181 	clz	r1, r1
 8000fb8:	b2c9      	uxtb	r1, r1
 8000fba:	408b      	lsls	r3, r1
 8000fbc:	4943      	ldr	r1, [pc, #268]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	600b      	str	r3, [r1, #0]
 8000fc2:	e015      	b.n	8000ff0 <HAL_RCC_OscConfig+0x1bc>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000fc4:	4b43      	ldr	r3, [pc, #268]	; (80010d4 <HAL_RCC_OscConfig+0x2a0>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fca:	f7ff fc25 	bl	8000818 <HAL_GetTick>
 8000fce:	6238      	str	r0, [r7, #32]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fd0:	e008      	b.n	8000fe4 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000fd2:	f7ff fc21 	bl	8000818 <HAL_GetTick>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	6a3b      	ldr	r3, [r7, #32]
 8000fda:	1ad3      	subs	r3, r2, r3
 8000fdc:	2b02      	cmp	r3, #2
 8000fde:	d901      	bls.n	8000fe4 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	e16c      	b.n	80012be <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000fe4:	4b39      	ldr	r3, [pc, #228]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f003 0302 	and.w	r3, r3, #2
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1f0      	bne.n	8000fd2 <HAL_RCC_OscConfig+0x19e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0308 	and.w	r3, r3, #8
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d030      	beq.n	800105e <HAL_RCC_OscConfig+0x22a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	695b      	ldr	r3, [r3, #20]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d016      	beq.n	8001032 <HAL_RCC_OscConfig+0x1fe>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001004:	4b34      	ldr	r3, [pc, #208]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8001006:	2201      	movs	r2, #1
 8001008:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800100a:	f7ff fc05 	bl	8000818 <HAL_GetTick>
 800100e:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001010:	e008      	b.n	8001024 <HAL_RCC_OscConfig+0x1f0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001012:	f7ff fc01 	bl	8000818 <HAL_GetTick>
 8001016:	4602      	mov	r2, r0
 8001018:	6a3b      	ldr	r3, [r7, #32]
 800101a:	1ad3      	subs	r3, r2, r3
 800101c:	2b02      	cmp	r3, #2
 800101e:	d901      	bls.n	8001024 <HAL_RCC_OscConfig+0x1f0>
        {
          return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e14c      	b.n	80012be <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001024:	4b29      	ldr	r3, [pc, #164]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8001026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001028:	f003 0302 	and.w	r3, r3, #2
 800102c:	2b00      	cmp	r3, #0
 800102e:	d0f0      	beq.n	8001012 <HAL_RCC_OscConfig+0x1de>
 8001030:	e015      	b.n	800105e <HAL_RCC_OscConfig+0x22a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001032:	4b29      	ldr	r3, [pc, #164]	; (80010d8 <HAL_RCC_OscConfig+0x2a4>)
 8001034:	2200      	movs	r2, #0
 8001036:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001038:	f7ff fbee 	bl	8000818 <HAL_GetTick>
 800103c:	6238      	str	r0, [r7, #32]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800103e:	e008      	b.n	8001052 <HAL_RCC_OscConfig+0x21e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001040:	f7ff fbea 	bl	8000818 <HAL_GetTick>
 8001044:	4602      	mov	r2, r0
 8001046:	6a3b      	ldr	r3, [r7, #32]
 8001048:	1ad3      	subs	r3, r2, r3
 800104a:	2b02      	cmp	r3, #2
 800104c:	d901      	bls.n	8001052 <HAL_RCC_OscConfig+0x21e>
        {
          return HAL_TIMEOUT;
 800104e:	2303      	movs	r3, #3
 8001050:	e135      	b.n	80012be <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001052:	4b1e      	ldr	r3, [pc, #120]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8001054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001056:	f003 0302 	and.w	r3, r3, #2
 800105a:	2b00      	cmp	r3, #0
 800105c:	d1f0      	bne.n	8001040 <HAL_RCC_OscConfig+0x20c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0304 	and.w	r3, r3, #4
 8001066:	2b00      	cmp	r3, #0
 8001068:	f000 8087 	beq.w	800117a <HAL_RCC_OscConfig+0x346>
  {
    FlagStatus       pwrclkchanged = RESET;
 800106c:	2300      	movs	r3, #0
 800106e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001072:	4b16      	ldr	r3, [pc, #88]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800107a:	2b00      	cmp	r3, #0
 800107c:	d110      	bne.n	80010a0 <HAL_RCC_OscConfig+0x26c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	4b12      	ldr	r3, [pc, #72]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	4a11      	ldr	r2, [pc, #68]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8001088:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800108c:	6413      	str	r3, [r2, #64]	; 0x40
 800108e:	4b0f      	ldr	r3, [pc, #60]	; (80010cc <HAL_RCC_OscConfig+0x298>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800109a:	2301      	movs	r3, #1
 800109c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_RCC_OscConfig+0x2a8>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0d      	ldr	r2, [pc, #52]	; (80010dc <HAL_RCC_OscConfig+0x2a8>)
 80010a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010aa:	6013      	str	r3, [r2, #0]

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ac:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <HAL_RCC_OscConfig+0x2a8>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d122      	bne.n	80010fe <HAL_RCC_OscConfig+0x2ca>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80010b8:	4b08      	ldr	r3, [pc, #32]	; (80010dc <HAL_RCC_OscConfig+0x2a8>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a07      	ldr	r2, [pc, #28]	; (80010dc <HAL_RCC_OscConfig+0x2a8>)
 80010be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010c2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80010c4:	f7ff fba8 	bl	8000818 <HAL_GetTick>
 80010c8:	6238      	str	r0, [r7, #32]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010ca:	e012      	b.n	80010f2 <HAL_RCC_OscConfig+0x2be>
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40023802 	.word	0x40023802
 80010d4:	42470000 	.word	0x42470000
 80010d8:	42470e80 	.word	0x42470e80
 80010dc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80010e0:	f7ff fb9a 	bl	8000818 <HAL_GetTick>
 80010e4:	4602      	mov	r2, r0
 80010e6:	6a3b      	ldr	r3, [r7, #32]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	2b02      	cmp	r3, #2
 80010ec:	d901      	bls.n	80010f2 <HAL_RCC_OscConfig+0x2be>
        {
          return HAL_TIMEOUT;
 80010ee:	2303      	movs	r3, #3
 80010f0:	e0e5      	b.n	80012be <HAL_RCC_OscConfig+0x48a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80010f2:	4b75      	ldr	r3, [pc, #468]	; (80012c8 <HAL_RCC_OscConfig+0x494>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d0f0      	beq.n	80010e0 <HAL_RCC_OscConfig+0x2ac>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	689a      	ldr	r2, [r3, #8]
 8001102:	4b72      	ldr	r3, [pc, #456]	; (80012cc <HAL_RCC_OscConfig+0x498>)
 8001104:	b2d2      	uxtb	r2, r2
 8001106:	701a      	strb	r2, [r3, #0]
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d015      	beq.n	800113c <HAL_RCC_OscConfig+0x308>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001110:	f7ff fb82 	bl	8000818 <HAL_GetTick>
 8001114:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001116:	e00a      	b.n	800112e <HAL_RCC_OscConfig+0x2fa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001118:	f7ff fb7e 	bl	8000818 <HAL_GetTick>
 800111c:	4602      	mov	r2, r0
 800111e:	6a3b      	ldr	r3, [r7, #32]
 8001120:	1ad3      	subs	r3, r2, r3
 8001122:	f241 3288 	movw	r2, #5000	; 0x1388
 8001126:	4293      	cmp	r3, r2
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0x2fa>
        {
          return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e0c7      	b.n	80012be <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800112e:	4b68      	ldr	r3, [pc, #416]	; (80012d0 <HAL_RCC_OscConfig+0x49c>)
 8001130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0ee      	beq.n	8001118 <HAL_RCC_OscConfig+0x2e4>
 800113a:	e014      	b.n	8001166 <HAL_RCC_OscConfig+0x332>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113c:	f7ff fb6c 	bl	8000818 <HAL_GetTick>
 8001140:	6238      	str	r0, [r7, #32]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001142:	e00a      	b.n	800115a <HAL_RCC_OscConfig+0x326>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001144:	f7ff fb68 	bl	8000818 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	6a3b      	ldr	r3, [r7, #32]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001152:	4293      	cmp	r3, r2
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x326>
        {
          return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e0b1      	b.n	80012be <HAL_RCC_OscConfig+0x48a>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800115a:	4b5d      	ldr	r3, [pc, #372]	; (80012d0 <HAL_RCC_OscConfig+0x49c>)
 800115c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1ee      	bne.n	8001144 <HAL_RCC_OscConfig+0x310>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001166:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800116a:	2b01      	cmp	r3, #1
 800116c:	d105      	bne.n	800117a <HAL_RCC_OscConfig+0x346>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800116e:	4b58      	ldr	r3, [pc, #352]	; (80012d0 <HAL_RCC_OscConfig+0x49c>)
 8001170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001172:	4a57      	ldr	r2, [pc, #348]	; (80012d0 <HAL_RCC_OscConfig+0x49c>)
 8001174:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001178:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	699b      	ldr	r3, [r3, #24]
 800117e:	2b00      	cmp	r3, #0
 8001180:	f000 809c 	beq.w	80012bc <HAL_RCC_OscConfig+0x488>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001184:	4b52      	ldr	r3, [pc, #328]	; (80012d0 <HAL_RCC_OscConfig+0x49c>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 030c 	and.w	r3, r3, #12
 800118c:	2b08      	cmp	r3, #8
 800118e:	d061      	beq.n	8001254 <HAL_RCC_OscConfig+0x420>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	699b      	ldr	r3, [r3, #24]
 8001194:	2b02      	cmp	r3, #2
 8001196:	d146      	bne.n	8001226 <HAL_RCC_OscConfig+0x3f2>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001198:	4b4e      	ldr	r3, [pc, #312]	; (80012d4 <HAL_RCC_OscConfig+0x4a0>)
 800119a:	2200      	movs	r2, #0
 800119c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800119e:	f7ff fb3b 	bl	8000818 <HAL_GetTick>
 80011a2:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011a4:	e008      	b.n	80011b8 <HAL_RCC_OscConfig+0x384>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80011a6:	f7ff fb37 	bl	8000818 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	6a3b      	ldr	r3, [r7, #32]
 80011ae:	1ad3      	subs	r3, r2, r3
 80011b0:	2b64      	cmp	r3, #100	; 0x64
 80011b2:	d901      	bls.n	80011b8 <HAL_RCC_OscConfig+0x384>
          {
            return HAL_TIMEOUT;
 80011b4:	2303      	movs	r3, #3
 80011b6:	e082      	b.n	80012be <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80011b8:	4b45      	ldr	r3, [pc, #276]	; (80012d0 <HAL_RCC_OscConfig+0x49c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d1f0      	bne.n	80011a6 <HAL_RCC_OscConfig+0x372>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011c4:	4b42      	ldr	r3, [pc, #264]	; (80012d0 <HAL_RCC_OscConfig+0x49c>)
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	4b43      	ldr	r3, [pc, #268]	; (80012d8 <HAL_RCC_OscConfig+0x4a4>)
 80011ca:	4013      	ands	r3, r2
 80011cc:	687a      	ldr	r2, [r7, #4]
 80011ce:	69d1      	ldr	r1, [r2, #28]
 80011d0:	687a      	ldr	r2, [r7, #4]
 80011d2:	6a12      	ldr	r2, [r2, #32]
 80011d4:	4311      	orrs	r1, r2
 80011d6:	687a      	ldr	r2, [r7, #4]
 80011d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80011da:	0192      	lsls	r2, r2, #6
 80011dc:	4311      	orrs	r1, r2
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80011e2:	0612      	lsls	r2, r2, #24
 80011e4:	4311      	orrs	r1, r2
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80011ea:	0852      	lsrs	r2, r2, #1
 80011ec:	3a01      	subs	r2, #1
 80011ee:	0412      	lsls	r2, r2, #16
 80011f0:	430a      	orrs	r2, r1
 80011f2:	4937      	ldr	r1, [pc, #220]	; (80012d0 <HAL_RCC_OscConfig+0x49c>)
 80011f4:	4313      	orrs	r3, r2
 80011f6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011f8:	4b36      	ldr	r3, [pc, #216]	; (80012d4 <HAL_RCC_OscConfig+0x4a0>)
 80011fa:	2201      	movs	r2, #1
 80011fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011fe:	f7ff fb0b 	bl	8000818 <HAL_GetTick>
 8001202:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001204:	e008      	b.n	8001218 <HAL_RCC_OscConfig+0x3e4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001206:	f7ff fb07 	bl	8000818 <HAL_GetTick>
 800120a:	4602      	mov	r2, r0
 800120c:	6a3b      	ldr	r3, [r7, #32]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	2b64      	cmp	r3, #100	; 0x64
 8001212:	d901      	bls.n	8001218 <HAL_RCC_OscConfig+0x3e4>
          {
            return HAL_TIMEOUT;
 8001214:	2303      	movs	r3, #3
 8001216:	e052      	b.n	80012be <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001218:	4b2d      	ldr	r3, [pc, #180]	; (80012d0 <HAL_RCC_OscConfig+0x49c>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d0f0      	beq.n	8001206 <HAL_RCC_OscConfig+0x3d2>
 8001224:	e04a      	b.n	80012bc <HAL_RCC_OscConfig+0x488>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001226:	4b2b      	ldr	r3, [pc, #172]	; (80012d4 <HAL_RCC_OscConfig+0x4a0>)
 8001228:	2200      	movs	r2, #0
 800122a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122c:	f7ff faf4 	bl	8000818 <HAL_GetTick>
 8001230:	6238      	str	r0, [r7, #32]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x412>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001234:	f7ff faf0 	bl	8000818 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	6a3b      	ldr	r3, [r7, #32]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b64      	cmp	r3, #100	; 0x64
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x412>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e03b      	b.n	80012be <HAL_RCC_OscConfig+0x48a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001246:	4b22      	ldr	r3, [pc, #136]	; (80012d0 <HAL_RCC_OscConfig+0x49c>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f0      	bne.n	8001234 <HAL_RCC_OscConfig+0x400>
 8001252:	e033      	b.n	80012bc <HAL_RCC_OscConfig+0x488>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d101      	bne.n	8001260 <HAL_RCC_OscConfig+0x42c>
      {
        return HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	e02e      	b.n	80012be <HAL_RCC_OscConfig+0x48a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        uint32_t pllcfgr = RCC->PLLCFGR;
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <HAL_RCC_OscConfig+0x49c>)
 8001262:	685b      	ldr	r3, [r3, #4]
 8001264:	61fb      	str	r3, [r7, #28]
      
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69db      	ldr	r3, [r3, #28]
 8001270:	429a      	cmp	r2, r3
 8001272:	d121      	bne.n	80012b8 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001274:	69fb      	ldr	r3, [r7, #28]
 8001276:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pllcfgr, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800127e:	429a      	cmp	r2, r3
 8001280:	d11a      	bne.n	80012b8 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001282:	69fa      	ldr	r2, [r7, #28]
 8001284:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001288:	4013      	ands	r3, r2
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800128e:	0192      	lsls	r2, r2, #6
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001290:	4293      	cmp	r3, r2
 8001292:	d111      	bne.n	80012b8 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001294:	69fb      	ldr	r3, [r7, #28]
 8001296:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800129e:	085b      	lsrs	r3, r3, #1
 80012a0:	3b01      	subs	r3, #1
 80012a2:	041b      	lsls	r3, r3, #16
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80012a4:	429a      	cmp	r2, r3
 80012a6:	d107      	bne.n	80012b8 <HAL_RCC_OscConfig+0x484>
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80012a8:	69fb      	ldr	r3, [r7, #28]
 80012aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b2:	061b      	lsls	r3, r3, #24
           (READ_BIT(pllcfgr, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d001      	beq.n	80012bc <HAL_RCC_OscConfig+0x488>
        {
          return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e000      	b.n	80012be <HAL_RCC_OscConfig+0x48a>
        }
      }
    }
  }
  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3728      	adds	r7, #40	; 0x28
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40007000 	.word	0x40007000
 80012cc:	40023870 	.word	0x40023870
 80012d0:	40023800 	.word	0x40023800
 80012d4:	42470060 	.word	0x42470060
 80012d8:	f0bc8000 	.word	0xf0bc8000

080012dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
 80012e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d101      	bne.n	80012f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012ec:	2301      	movs	r3, #1
 80012ee:	e0d2      	b.n	8001496 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012f0:	4b6b      	ldr	r3, [pc, #428]	; (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f003 030f 	and.w	r3, r3, #15
 80012f8:	683a      	ldr	r2, [r7, #0]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d90c      	bls.n	8001318 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012fe:	4b68      	ldr	r3, [pc, #416]	; (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001300:	683a      	ldr	r2, [r7, #0]
 8001302:	b2d2      	uxtb	r2, r2
 8001304:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001306:	4b66      	ldr	r3, [pc, #408]	; (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 030f 	and.w	r3, r3, #15
 800130e:	683a      	ldr	r2, [r7, #0]
 8001310:	429a      	cmp	r2, r3
 8001312:	d001      	beq.n	8001318 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e0be      	b.n	8001496 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f003 0302 	and.w	r3, r3, #2
 8001320:	2b00      	cmp	r3, #0
 8001322:	d020      	beq.n	8001366 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	2b00      	cmp	r3, #0
 800132e:	d005      	beq.n	800133c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001330:	4b5c      	ldr	r3, [pc, #368]	; (80014a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	4a5b      	ldr	r2, [pc, #364]	; (80014a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001336:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800133a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0308 	and.w	r3, r3, #8
 8001344:	2b00      	cmp	r3, #0
 8001346:	d005      	beq.n	8001354 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3U));
 8001348:	4b56      	ldr	r3, [pc, #344]	; (80014a4 <HAL_RCC_ClockConfig+0x1c8>)
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	4a55      	ldr	r2, [pc, #340]	; (80014a4 <HAL_RCC_ClockConfig+0x1c8>)
 800134e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001352:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001354:	4b53      	ldr	r3, [pc, #332]	; (80014a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	4950      	ldr	r1, [pc, #320]	; (80014a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001362:	4313      	orrs	r3, r2
 8001364:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0301 	and.w	r3, r3, #1
 800136e:	2b00      	cmp	r3, #0
 8001370:	d040      	beq.n	80013f4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b01      	cmp	r3, #1
 8001378:	d107      	bne.n	800138a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	4b4a      	ldr	r3, [pc, #296]	; (80014a4 <HAL_RCC_ClockConfig+0x1c8>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d115      	bne.n	80013b2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e085      	b.n	8001496 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	685b      	ldr	r3, [r3, #4]
 800138e:	2b02      	cmp	r3, #2
 8001390:	d107      	bne.n	80013a2 <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001392:	4b44      	ldr	r3, [pc, #272]	; (80014a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d109      	bne.n	80013b2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	e079      	b.n	8001496 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a2:	4b40      	ldr	r3, [pc, #256]	; (80014a4 <HAL_RCC_ClockConfig+0x1c8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d101      	bne.n	80013b2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
 80013b0:	e071      	b.n	8001496 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013b2:	4b3c      	ldr	r3, [pc, #240]	; (80014a4 <HAL_RCC_ClockConfig+0x1c8>)
 80013b4:	689b      	ldr	r3, [r3, #8]
 80013b6:	f023 0203 	bic.w	r2, r3, #3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	4939      	ldr	r1, [pc, #228]	; (80014a4 <HAL_RCC_ClockConfig+0x1c8>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013c4:	f7ff fa28 	bl	8000818 <HAL_GetTick>
 80013c8:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ca:	e00a      	b.n	80013e2 <HAL_RCC_ClockConfig+0x106>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013cc:	f7ff fa24 	bl	8000818 <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	697b      	ldr	r3, [r7, #20]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013da:	4293      	cmp	r3, r2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e059      	b.n	8001496 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013e2:	4b30      	ldr	r3, [pc, #192]	; (80014a4 <HAL_RCC_ClockConfig+0x1c8>)
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	f003 020c 	and.w	r2, r3, #12
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d1eb      	bne.n	80013cc <HAL_RCC_ClockConfig+0xf0>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013f4:	4b2a      	ldr	r3, [pc, #168]	; (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 030f 	and.w	r3, r3, #15
 80013fc:	683a      	ldr	r2, [r7, #0]
 80013fe:	429a      	cmp	r2, r3
 8001400:	d20c      	bcs.n	800141c <HAL_RCC_ClockConfig+0x140>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001402:	4b27      	ldr	r3, [pc, #156]	; (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800140a:	4b25      	ldr	r3, [pc, #148]	; (80014a0 <HAL_RCC_ClockConfig+0x1c4>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f003 030f 	and.w	r3, r3, #15
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	429a      	cmp	r2, r3
 8001416:	d001      	beq.n	800141c <HAL_RCC_ClockConfig+0x140>
    {
      return HAL_ERROR;
 8001418:	2301      	movs	r3, #1
 800141a:	e03c      	b.n	8001496 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	2b00      	cmp	r3, #0
 8001426:	d008      	beq.n	800143a <HAL_RCC_ClockConfig+0x15e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001428:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <HAL_RCC_ClockConfig+0x1c8>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	491b      	ldr	r1, [pc, #108]	; (80014a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001436:	4313      	orrs	r3, r2
 8001438:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f003 0308 	and.w	r3, r3, #8
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001446:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	691b      	ldr	r3, [r3, #16]
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	4913      	ldr	r1, [pc, #76]	; (80014a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001456:	4313      	orrs	r3, r2
 8001458:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> POSITION_VAL(RCC_CFGR_HPRE)];
 800145a:	f000 f82b 	bl	80014b4 <HAL_RCC_GetSysClockFreq>
 800145e:	4601      	mov	r1, r0
 8001460:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <HAL_RCC_ClockConfig+0x1c8>)
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001468:	22f0      	movs	r2, #240	; 0xf0
 800146a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	fa92 f2a2 	rbit	r2, r2
 8001472:	60fa      	str	r2, [r7, #12]
  return result;
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	fab2 f282 	clz	r2, r2
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	40d3      	lsrs	r3, r2
 800147e:	4a0a      	ldr	r2, [pc, #40]	; (80014a8 <HAL_RCC_ClockConfig+0x1cc>)
 8001480:	5cd3      	ldrb	r3, [r2, r3]
 8001482:	fa21 f303 	lsr.w	r3, r1, r3
 8001486:	4a09      	ldr	r2, [pc, #36]	; (80014ac <HAL_RCC_ClockConfig+0x1d0>)
 8001488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <HAL_RCC_ClockConfig+0x1d4>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff f980 	bl	8000794 <HAL_InitTick>

  return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3718      	adds	r7, #24
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023c00 	.word	0x40023c00
 80014a4:	40023800 	.word	0x40023800
 80014a8:	08001738 	.word	0x08001738
 80014ac:	20000000 	.word	0x20000000
 80014b0:	20000004 	.word	0x20000004

080014b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014b8:	b094      	sub	sp, #80	; 0x50
 80014ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80014bc:	2300      	movs	r3, #0
 80014be:	647b      	str	r3, [r7, #68]	; 0x44
 80014c0:	2300      	movs	r3, #0
 80014c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80014c4:	2300      	movs	r3, #0
 80014c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80014c8:	2300      	movs	r3, #0
 80014ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014cc:	4b7c      	ldr	r3, [pc, #496]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x20c>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f003 030c 	and.w	r3, r3, #12
 80014d4:	2b08      	cmp	r3, #8
 80014d6:	d00d      	beq.n	80014f4 <HAL_RCC_GetSysClockFreq+0x40>
 80014d8:	2b08      	cmp	r3, #8
 80014da:	f200 80e7 	bhi.w	80016ac <HAL_RCC_GetSysClockFreq+0x1f8>
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d002      	beq.n	80014e8 <HAL_RCC_GetSysClockFreq+0x34>
 80014e2:	2b04      	cmp	r3, #4
 80014e4:	d003      	beq.n	80014ee <HAL_RCC_GetSysClockFreq+0x3a>
 80014e6:	e0e1      	b.n	80016ac <HAL_RCC_GetSysClockFreq+0x1f8>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014e8:	4b76      	ldr	r3, [pc, #472]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x210>)
 80014ea:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80014ec:	e0e1      	b.n	80016b2 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014ee:	4b75      	ldr	r3, [pc, #468]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x210>)
 80014f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80014f2:	e0de      	b.n	80016b2 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014f4:	4b72      	ldr	r3, [pc, #456]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x20c>)
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80014fc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014fe:	4b70      	ldr	r3, [pc, #448]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d065      	beq.n	80015d6 <HAL_RCC_GetSysClockFreq+0x122>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800150a:	4b6d      	ldr	r3, [pc, #436]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x20c>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	099b      	lsrs	r3, r3, #6
 8001510:	2200      	movs	r2, #0
 8001512:	63bb      	str	r3, [r7, #56]	; 0x38
 8001514:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001518:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800151c:	633b      	str	r3, [r7, #48]	; 0x30
 800151e:	2300      	movs	r3, #0
 8001520:	637b      	str	r3, [r7, #52]	; 0x34
 8001522:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001526:	4622      	mov	r2, r4
 8001528:	462b      	mov	r3, r5
 800152a:	f04f 0000 	mov.w	r0, #0
 800152e:	f04f 0100 	mov.w	r1, #0
 8001532:	0159      	lsls	r1, r3, #5
 8001534:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001538:	0150      	lsls	r0, r2, #5
 800153a:	4602      	mov	r2, r0
 800153c:	460b      	mov	r3, r1
 800153e:	4621      	mov	r1, r4
 8001540:	1a51      	subs	r1, r2, r1
 8001542:	6139      	str	r1, [r7, #16]
 8001544:	4629      	mov	r1, r5
 8001546:	eb63 0301 	sbc.w	r3, r3, r1
 800154a:	617b      	str	r3, [r7, #20]
 800154c:	f04f 0200 	mov.w	r2, #0
 8001550:	f04f 0300 	mov.w	r3, #0
 8001554:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001558:	4659      	mov	r1, fp
 800155a:	018b      	lsls	r3, r1, #6
 800155c:	4651      	mov	r1, sl
 800155e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001562:	4651      	mov	r1, sl
 8001564:	018a      	lsls	r2, r1, #6
 8001566:	46d4      	mov	ip, sl
 8001568:	ebb2 080c 	subs.w	r8, r2, ip
 800156c:	4659      	mov	r1, fp
 800156e:	eb63 0901 	sbc.w	r9, r3, r1
 8001572:	f04f 0200 	mov.w	r2, #0
 8001576:	f04f 0300 	mov.w	r3, #0
 800157a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800157e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001582:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001586:	4690      	mov	r8, r2
 8001588:	4699      	mov	r9, r3
 800158a:	4623      	mov	r3, r4
 800158c:	eb18 0303 	adds.w	r3, r8, r3
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	462b      	mov	r3, r5
 8001594:	eb49 0303 	adc.w	r3, r9, r3
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	f04f 0300 	mov.w	r3, #0
 80015a2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80015a6:	4629      	mov	r1, r5
 80015a8:	028b      	lsls	r3, r1, #10
 80015aa:	4620      	mov	r0, r4
 80015ac:	4629      	mov	r1, r5
 80015ae:	4604      	mov	r4, r0
 80015b0:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80015b4:	4601      	mov	r1, r0
 80015b6:	028a      	lsls	r2, r1, #10
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80015be:	2200      	movs	r2, #0
 80015c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80015c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80015c4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80015c8:	f7fe fdfc 	bl	80001c4 <__aeabi_uldivmod>
 80015cc:	4602      	mov	r2, r0
 80015ce:	460b      	mov	r3, r1
 80015d0:	4613      	mov	r3, r2
 80015d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80015d4:	e05c      	b.n	8001690 <HAL_RCC_GetSysClockFreq+0x1dc>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015d6:	4b3a      	ldr	r3, [pc, #232]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x20c>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	099b      	lsrs	r3, r3, #6
 80015dc:	2200      	movs	r2, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	4611      	mov	r1, r2
 80015e2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80015e6:	623b      	str	r3, [r7, #32]
 80015e8:	2300      	movs	r3, #0
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
 80015ec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80015f0:	4642      	mov	r2, r8
 80015f2:	464b      	mov	r3, r9
 80015f4:	f04f 0000 	mov.w	r0, #0
 80015f8:	f04f 0100 	mov.w	r1, #0
 80015fc:	0159      	lsls	r1, r3, #5
 80015fe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001602:	0150      	lsls	r0, r2, #5
 8001604:	4602      	mov	r2, r0
 8001606:	460b      	mov	r3, r1
 8001608:	46c4      	mov	ip, r8
 800160a:	ebb2 0a0c 	subs.w	sl, r2, ip
 800160e:	4640      	mov	r0, r8
 8001610:	4649      	mov	r1, r9
 8001612:	468c      	mov	ip, r1
 8001614:	eb63 0b0c 	sbc.w	fp, r3, ip
 8001618:	f04f 0200 	mov.w	r2, #0
 800161c:	f04f 0300 	mov.w	r3, #0
 8001620:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001624:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001628:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800162c:	ebb2 040a 	subs.w	r4, r2, sl
 8001630:	eb63 050b 	sbc.w	r5, r3, fp
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	f04f 0300 	mov.w	r3, #0
 800163c:	00eb      	lsls	r3, r5, #3
 800163e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001642:	00e2      	lsls	r2, r4, #3
 8001644:	4614      	mov	r4, r2
 8001646:	461d      	mov	r5, r3
 8001648:	4603      	mov	r3, r0
 800164a:	18e3      	adds	r3, r4, r3
 800164c:	603b      	str	r3, [r7, #0]
 800164e:	460b      	mov	r3, r1
 8001650:	eb45 0303 	adc.w	r3, r5, r3
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	f04f 0300 	mov.w	r3, #0
 800165e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001662:	4629      	mov	r1, r5
 8001664:	028b      	lsls	r3, r1, #10
 8001666:	4620      	mov	r0, r4
 8001668:	4629      	mov	r1, r5
 800166a:	4604      	mov	r4, r0
 800166c:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8001670:	4601      	mov	r1, r0
 8001672:	028a      	lsls	r2, r1, #10
 8001674:	4610      	mov	r0, r2
 8001676:	4619      	mov	r1, r3
 8001678:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800167a:	2200      	movs	r2, #0
 800167c:	61bb      	str	r3, [r7, #24]
 800167e:	61fa      	str	r2, [r7, #28]
 8001680:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001684:	f7fe fd9e 	bl	80001c4 <__aeabi_uldivmod>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4613      	mov	r3, r2
 800168e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <HAL_RCC_GetSysClockFreq+0x20c>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	0c1b      	lsrs	r3, r3, #16
 8001696:	f003 0303 	and.w	r3, r3, #3
 800169a:	3301      	adds	r3, #1
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80016a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80016a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80016a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80016aa:	e002      	b.n	80016b2 <HAL_RCC_GetSysClockFreq+0x1fe>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <HAL_RCC_GetSysClockFreq+0x210>)
 80016ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80016b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3750      	adds	r7, #80	; 0x50
 80016b8:	46bd      	mov	sp, r7
 80016ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016be:	bf00      	nop
 80016c0:	40023800 	.word	0x40023800
 80016c4:	00f42400 	.word	0x00f42400

080016c8 <__libc_init_array>:
 80016c8:	b570      	push	{r4, r5, r6, lr}
 80016ca:	2600      	movs	r6, #0
 80016cc:	4d0c      	ldr	r5, [pc, #48]	; (8001700 <__libc_init_array+0x38>)
 80016ce:	4c0d      	ldr	r4, [pc, #52]	; (8001704 <__libc_init_array+0x3c>)
 80016d0:	1b64      	subs	r4, r4, r5
 80016d2:	10a4      	asrs	r4, r4, #2
 80016d4:	42a6      	cmp	r6, r4
 80016d6:	d109      	bne.n	80016ec <__libc_init_array+0x24>
 80016d8:	f000 f822 	bl	8001720 <_init>
 80016dc:	2600      	movs	r6, #0
 80016de:	4d0a      	ldr	r5, [pc, #40]	; (8001708 <__libc_init_array+0x40>)
 80016e0:	4c0a      	ldr	r4, [pc, #40]	; (800170c <__libc_init_array+0x44>)
 80016e2:	1b64      	subs	r4, r4, r5
 80016e4:	10a4      	asrs	r4, r4, #2
 80016e6:	42a6      	cmp	r6, r4
 80016e8:	d105      	bne.n	80016f6 <__libc_init_array+0x2e>
 80016ea:	bd70      	pop	{r4, r5, r6, pc}
 80016ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80016f0:	4798      	blx	r3
 80016f2:	3601      	adds	r6, #1
 80016f4:	e7ee      	b.n	80016d4 <__libc_init_array+0xc>
 80016f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80016fa:	4798      	blx	r3
 80016fc:	3601      	adds	r6, #1
 80016fe:	e7f2      	b.n	80016e6 <__libc_init_array+0x1e>
 8001700:	08001750 	.word	0x08001750
 8001704:	08001750 	.word	0x08001750
 8001708:	08001750 	.word	0x08001750
 800170c:	08001754 	.word	0x08001754

08001710 <memset>:
 8001710:	4603      	mov	r3, r0
 8001712:	4402      	add	r2, r0
 8001714:	4293      	cmp	r3, r2
 8001716:	d100      	bne.n	800171a <memset+0xa>
 8001718:	4770      	bx	lr
 800171a:	f803 1b01 	strb.w	r1, [r3], #1
 800171e:	e7f9      	b.n	8001714 <memset+0x4>

08001720 <_init>:
 8001720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001722:	bf00      	nop
 8001724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001726:	bc08      	pop	{r3}
 8001728:	469e      	mov	lr, r3
 800172a:	4770      	bx	lr

0800172c <_fini>:
 800172c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800172e:	bf00      	nop
 8001730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001732:	bc08      	pop	{r3}
 8001734:	469e      	mov	lr, r3
 8001736:	4770      	bx	lr
